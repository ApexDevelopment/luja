enum LuaConstant {
	Nil
	Boolean(value: bool)
	Number(value: f64)
	LString(value: String)
}

enum LuaValue {
	Constant(LuaConstant)
	LuaFunction(id: u64)
	NonLuaFunction(String)
	Table(id: u64)

	// public function convert_to_bool(anon value: LuaValue) -> LuaValue {
	// 	//
	// }

	// public function convert_to_string(anon value: LuaValue) -> LuaValue {
	// 	//
	// }

	// public function convert_to_number(anon value: LuaValue) -> LuaValue {
	// 	//
	// }
}

class LuaLocal {
	public name: String
	public scope_start: usize
	public scope_end: usize
}

class LuaInstruction {
	public opcode: u8
	public A: u32
	public B: u32
	public C: u32
	public Bx: u32
	public sBx: i32

	public function from_u32(anon raw_instruction: u32) throws -> LuaInstruction {
		let opcode: u8 = raw_instruction & 0b111111
		let A: u32 = (raw_instruction >> 6) & 0xF
		let C: u32 = (raw_instruction >> 14) & 0xF
		let B: u32 = (raw_instruction >> 23) & 0x1F
		let Bx: u32 = C | (B << 9)
		let sBx: i32 = (Bx as! i32) - 131071

		return LuaInstruction(opcode, A, B, C, Bx, sBx)
	}
}

class LuaChunk {
	public source_name: String
	public source_line_start: usize
	public source_line_end: usize
	public number_of_upvalues: u8
	public number_of_parameters: u8
	public is_vararg: u8
	public max_stack_size: u8
	public instruction_list: [LuaInstruction]
	public constant_list: [LuaConstant]
	public prototype_list: [LuaChunk]
	public source_line_list: [usize]
	public local_list: [LuaLocal]
	public upvalue_list: [String]
}

class LuaHeader {
	public version: u8
	public format: u8
	public endianness: u8
	public size_int: usize
	public size_size_t: usize
	public size_instruction: usize
	public size_lua_number: usize
	public number_type: u8
}