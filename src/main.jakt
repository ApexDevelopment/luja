import BufferReader { BufferReader }
import LuaTypes { LuaEnvironment, LuaScope, LuaConstant, LuaLocal, LuaInstruction, LuaHeader, LuaChunk }

class LuaFile {
	public header: LuaHeader
	public main_chunk: LuaChunk
}

enum FileLoadResult {
	Success(LuaFile)
	NotALuaFile
}

function load_lua_instruction(mut buffer: BufferReader) throws -> LuaInstruction {
	let raw_instruction = buffer.next_u32()
	let opcode: u8 = raw_instruction & 0b111111
	let A: u32 = (raw_instruction >> 6) & 0xF
	let C: u32 = (raw_instruction >> 14) & 0xF
	let B: u32 = (raw_instruction >> 23) & 0x1F
	let Bx: u32 = C | (B << 9)
	let sBx: i32 = (Bx as! i32) - 131071

	// println("Instruction op:{} A:{} B:{} C:{} Bx:{} sBx:{}", opcode, A, B, C, Bx, sBx)

	return LuaInstruction(opcode, A, B, C, Bx, sBx)
}

function load_lua_string(mut buffer: BufferReader, header: LuaHeader) throws -> String {
	let string_length = buffer.next_integer_of_size(integer_size: header.size_size_t as! usize)
	mut string_builder: StringBuilder = StringBuilder::create()

	// String length - 1 so that the null byte at the end isn't included
	for string_index in 0 .. string_length - 1 {
		string_builder.append(buffer.next_byte())
	}

	// Skip null byte
	buffer.next_byte()

	return string_builder.to_string()
}

function load_lua_number(mut buffer: BufferReader, header: LuaHeader) -> LuaConstant {
	// TODO: Implement more Lua number types (support for integers, doubles, etc)
	let byte1 = (buffer.next_byte() as! u64)
	let byte2 = (buffer.next_byte() as! u64) << 8
	let byte3 = (buffer.next_byte() as! u64) << 16
	let byte4 = (buffer.next_byte() as! u64) << 24
	let byte5 = (buffer.next_byte() as! u64) << 32
	let byte6 = (buffer.next_byte() as! u64) << 40
	let byte7 = (buffer.next_byte() as! u64) << 48
	let byte8 = (buffer.next_byte() as! u64) << 56

	mut final_number: f64 = 0

	unsafe {
		cpp {
			"
			union FloatConverter {
				u64 as_u64;
				f64 as_f64;
			};
			
			FloatConverter fc = {};
			fc.as_u64 = byte1 | byte2 | byte3 | byte4 | byte5 | byte6 | byte7 | byte8;
			final_number = fc.as_f64;
			"
		}
	}

	return LuaConstant::Number(value: final_number)
}

function load_lua_chunk(mut buffer: BufferReader, header: LuaHeader) throws -> LuaChunk {
	let source_name = load_lua_string(buffer, header)
	let source_line_start = buffer.next_integer_of_size(integer_size: header.size_int)
	let source_line_end = buffer.next_integer_of_size(integer_size: header.size_int)
	let number_of_upvalues = buffer.next_byte()
	let number_of_parameters = buffer.next_byte()
	let is_vararg = buffer.next_byte()
	let max_stack_size = buffer.next_byte()
	let size_code = buffer.next_integer_of_size(integer_size: header.size_int)
	mut instruction_list: [LuaInstruction] = []
	instruction_list.ensure_capacity(size_code)
	println("We have {} instructions", size_code)

	for code_index in 0 .. size_code {
		instruction_list.push(load_lua_instruction(buffer))
	}

	let size_constants = buffer.next_integer_of_size(integer_size: header.size_int)
	mut constant_list: [LuaConstant] = []
	constant_list.ensure_capacity(size_constants)
	println("We have {} constants", size_constants)

	for const_index in 0 .. size_constants {
		let constant_type = buffer.next_byte()

		let constant: LuaConstant = match constant_type {
			0 => LuaConstant::Nil
			1 => LuaConstant::Boolean(value: buffer.next_byte() != 0)
			3 => load_lua_number(buffer, header)
			4 => LuaConstant::LString(value: load_lua_string(buffer, header))
			else => LuaConstant::Nil
		}

		println("Constant {} is {}", const_index, constant)
		constant_list.push(constant)
	}

	let size_prototypes = buffer.next_integer_of_size(integer_size: header.size_int)
	mut prototype_list: [LuaChunk] = []
	prototype_list.ensure_capacity(size_prototypes)
	println("We have {} function protos", size_prototypes)

	for prototype_index in 0 .. size_prototypes {
		let prototype = load_lua_chunk(buffer, header)
		prototype_list.push(prototype)
	}

	let size_line_info = buffer.next_integer_of_size(integer_size: header.size_int)
	mut source_line_list: [usize] = []
	source_line_list.ensure_capacity(size_line_info)
	println("We have {} line positions", size_line_info)

	for instruction_position in 0 .. size_line_info {
		let line_number = buffer.next_integer_of_size(integer_size: header.size_int)
		source_line_list.push(line_number)
	}

	let size_locals = buffer.next_integer_of_size(integer_size: header.size_int)
	mut local_list: [LuaLocal] = []
	local_list.ensure_capacity(size_locals)
	println("We have {} local variable names", size_locals)

	for locals_index in 0 .. size_locals {
		let local_name = load_lua_string(buffer, header)
		println("Local variable {} is called {}", locals_index, local_name)
		let scope_start = buffer.next_integer_of_size(integer_size: header.size_int)
		let scope_end = buffer.next_integer_of_size(integer_size: header.size_int)
		local_list.push(LuaLocal(name: local_name, scope_start, scope_end))
	}

	let size_upvalues = buffer.next_integer_of_size(integer_size: header.size_int)
	mut upvalue_list: [String] = []
	upvalue_list.ensure_capacity(size_upvalues)
	println("We have {} upvalue names", size_prototypes)

	for upvalues_index in 0 .. size_upvalues {
		let upvalue_name = load_lua_string(buffer, header)
	}

	// debug info
	// for instruction_position in 0 .. size_code {
	// 	let instruction = instruction_list[instruction_position]
	// 	print("[{}] op:{} A:{} B:{} C:{} Bx:{} sBx:{}", instruction_position, instruction.opcode, instruction.A, instruction.B, instruction.C, instruction.Bx, instruction.sBx)

	// 	if (instruction.opcode == 1) {
	// 		print(" LOADK {} to slot {}", constant_list[instruction.Bx], instruction.A)
	// 	}
		
	// 	println()
	// }

	return LuaChunk(source_name, source_line_start, source_line_end, number_of_upvalues,
		number_of_parameters, is_vararg, max_stack_size, instruction_list, constant_list,
		prototype_list, source_line_list, local_list, upvalue_list)
}

// TODO: Load Lua script files rather than just bytecode files
function load_file(filename: String) throws -> FileLoadResult {
	mut file = File::open_for_reading(filename)

	// TODO: Stream file?
	let buffer = file.read_all()

	// Ensure valid Lua file
	guard buffer.size() > 12 and buffer[0] == 0x1b and buffer[1] == b'L' and buffer[2] == b'u' and buffer[3] == b'a' else {
		return FileLoadResult::NotALuaFile
	}

	// Parse out header
	let version = buffer[4]
	let format = buffer[5]
	let endianness = buffer[6]
	let size_int = buffer[7] as! usize
	let size_size_t = buffer[8] as! usize
	let size_instruction = buffer[9] as! usize
	let size_lua_number = buffer[10] as! usize
	let number_type = buffer[11]

	println("Lua number size: {}", size_lua_number)

	let header = LuaHeader(version, format, endianness, size_int, size_size_t, size_instruction, size_lua_number, number_type)
	let buffer_reader = BufferReader(index: 12, buffer)
	let main_chunk = load_lua_chunk(buffer: buffer_reader, header)

	return FileLoadResult::Success(LuaFile(header, main_chunk))
}

//function run_instruction(instruction: LuaInstruction)

function main(args: [String]) {
	guard args.size() > 1 else {
		eprintln("usage: luja <bytecode file>")
		return 1
	}

	let filename = args[1]
	let lua_file = load_file(filename)

	guard lua_file is Success(raw_lua_file) else {
		eprintln("File is not a Lua bytecode file")
		return 2
	}

	println("{}, {}, {}", raw_lua_file.main_chunk.source_name, raw_lua_file.main_chunk.source_line_start, raw_lua_file.main_chunk.source_line_end)

	let environment = LuaEnvironment()
	mut top_level_function = LuaScope::construct(environment, prototype: raw_lua_file.main_chunk, arguments: [])
	
	for instruction_index in 0 .. raw_lua_file.main_chunk.instruction_list.size() {
		top_level_function.run_instruction(instruction_index)
	}
}